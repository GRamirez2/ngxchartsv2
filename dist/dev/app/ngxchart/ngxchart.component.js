"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var data_1 = require('../data');
var NgxchartComponent = (function () {
    function NgxchartComponent() {
        this.view = [700, 400];
        this.showXAxis = true;
        this.showYAxis = true;
        this.gradient = false;
        this.showLegend = true;
        this.showXAxisLabel = true;
        this.xAxisLabel = 'Adherent';
        this.showYAxisLabel = true;
        this.yAxisLabel = 'Group';
        this.colorScheme = {
            domain: ['#5AA454', '#A10A28', '#C7B42C', '#AAAAAA']
        };
        Object.assign(this, { single: data_1.single });
    }
    NgxchartComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: 'ngxchart-component',
            templateUrl: 'ngxchart.component.html',
            styleUrls: ['ngxchart.component.css'],
        }), 
        __metadata('design:paramtypes', [])
    ], NgxchartComponent);
    return NgxchartComponent;
}());
exports.NgxchartComponent = NgxchartComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
